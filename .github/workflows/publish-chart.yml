name: Package & Publish 3rd Chart
run-name: "Package & Publish ${{ inputs.chart-name }} chart"
on:
  push:
    branches:
      - usr/shayki/deploy-wf
  workflow_dispatch:
    inputs:
      chart-name:
        description: 3rd chart name (under "bitnami" folder)
        type: string
        required: true
      cluster-name:
        description: k8s cluster name
        type: string
        default: dell-eks-dev
        required: true

permissions:
    id-token: write
    contents: read

jobs:
  deploy:
    runs-on: arc-runner-eks-small
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    - id: install-aws-cli
      uses: unfor19/install-aws-cli-action@v1
      with:
        version: 2     
        verbose: false            
        arch: amd64
    - name: Install YQ
      uses: dcarbone/install-yq-action@v1.3.1
      with:
        version: v3
    - name: Authenticate to AWS
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::702886132326:role/cfy-developers-github-actions-role
        aws-region: eu-west-1
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
    - name: Sync /usr/local/bin/docker image to ECR
      working-directory: bitnami/neo4j
      run: |
        yq --version
        which yq
        which /usr/local/bin/docker
        IMAGE_PATHS=$(/usr/bin/yq eval '.. | select(has("repository") and has("tag")) | path | join(".")' values.yaml)
        for PATH in $IMAGE_PATHS; do
          REGISTRY=$(/usr/bin/yq eval ".$PATH.registry // \"/usr/local/bin/docker.io\"" values.yaml)
          REPOSITORY=$(/usr/bin/yq eval ".$PATH.repository" values.yaml)
          TAG=$(/usr/bin/yq eval ".$PATH.tag" values.yaml)
        
          if [[ -z "$REPOSITORY" || -z "$TAG" ]]; then
            echo "Details not found at path: $PATH"
            continue
          fi
        
          IMAGE="$REGISTRY/$REPOSITORY:$TAG"
          echo "Processing image: $IMAGE"
                        
          # Define target ECR image
          TARGET_IMAGE="702886132326.dkr.ecr.eu-west-1.amazonaws.com/$REPOSITORY:$TAG"

           # Check if the image already exists in ECR
          if aws ecr describe-images --repository-name "$REPOSITORY" --image-ids imageTag="$TAG" > /dev/null 2>&1; then
            echo "Image already exists in ECR: $TARGET_IMAGE"
            continue
          fi

          # Pull the image from docker Hub
          /usr/local/bin/docker pull "$IMAGE"
          
          # Tag and push the image to ECR
          /usr/local/bin/docker tag "$IMAGE" "$TARGET_IMAGE"
          /usr/local/bin/docker push "$TARGET_IMAGE"
                
          echo "Successfully processed and pushed: $IMAGE to $TARGET_IMAGE"
        done
        /usr/bin/yq eval ".global.image.registry = \"702886132326.dkr.ecr.eu-west-1.amazonaws.com\"" -i values.yaml

        # REGISTRY=$(yq eval '.image.registry' values.yaml)
        # REPOSITORY=$(yq eval '.image.repository' values.yaml)
        # TAG=$(yq eval '.image.tag' values.yaml)
        
        # if [[ -z "$REGISTRY" || -z "$REPOSITORY" || -z "$TAG" ]]; then
        #   echo "Details not found in values.yaml"
        #   exit 1
        # fi
        
        # IMAGE="$REGISTRY/$REPOSITORY:$TAG"
        
        # /usr/local/bin/docker pull "$IMAGE"
        
        # TARGET_IMAGE="702886132326.dkr.ecr.eu-west-1.amazonaws.com/bitnami/neo4j:$TAG"
        # /usr/local/bin/docker tag "$IMAGE" "$TARGET_IMAGE"
        
        # /usr/local/bin/docker push "$TARGET_IMAGE"
      
        # yq eval ".global.image.registry = \"702886132326.dkr.ecr.eu-west-1.amazonaws.com\"" -i values.yaml

    - name: Publish Chart to ECR
      working-directory: bitnami/neo4j
      run: |
        CHART_VERSION=$(grep '^version:' Chart.yaml | awk '{print $2}')
        helm package -u --version $CHART_VERSION --dependency-update .
        helm push neo4j-$CHART_VERSION.tgz oci://702886132326.dkr.ecr.eu-west-1.amazonaws.com/bitnami/neo4j-chart
